Import toolkit-cpp-gcc.ham ;

PICFLAGS = -fpic ;

ANDROID_CC_ARGS =
-g
$(PICFLAGS)
-fno-strict-aliasing
-ffunction-sections
-funwind-tables
-fstack-protector
-fno-short-enums
-fvisibility=hidden
-DANDROID
-D__LITTLE_ENDIAN__
[ FQuoteFlag -I : $(ADR_DIR_NDK_USR)/include ]
-Werror -Wall
# -Wno-psabi
-Wno-trigraphs
-Wno-sign-compare
-Wno-unknown-pragmas
-Wno-switch
-Wno-comment
-Wno-unused
-Wno-uninitialized
-Wno-address
-Werror=return-stack-address
;
ANDROID_CC_ARGS +=
  $(ADR_CC_ARGS)
;

# For boost...
ANDROID_CC_ARGS +=
-pthread -Wno-deprecated-declarations
;

if $(ADR_LLVM_VERSION) {
  # Clang
  ANDROID_CC_ARGS +=
    -D__CLANG__
    -Wno-return-type-c-linkage
    -Wno-tautological-compare
    -Wno-implicit-exception-spec-mismatch
    -Wno-shift-negative-value
    -Wno-non-literal-null-conversion
  ;
  ANDROID_CPP_ARGS +=
    -std=c++11
    -Wno-narrowing
  ;
  ANDROID_LINK_BASE_ARGS +=
    # -flto
  ;
  if $(ADR_LLVM_VERSION) = 3.4 {
    ANDROID_CC_ARGS +=
      -Wno-deprecated-register
      -Wno-non-literal-null-conversion
      -Wno-extern-c-compat
      -Wno-typedef-redefinition
    ;
  }
  # TODO: Remove this, this is actually a very useful warning.
  ANDROID_CC_ARGS += -Wno-inconsistent-missing-override ;
}
else {
  # GCC 4.4.3
  ANDROID_CC_ARGS +=
    -finput-charset=UTF-8
  ;
  ANDROID_CPP_ARGS +=
    -std=c++11
    -Wno-narrowing
    # Fix compilation error with BOOST_STATIC_CONSTANT
    -Wno-invalid-offsetof
  ;
  if $(GCC_VER) = 4.8 {
    ANDROID_CC_ARGS += -fno-stack-protector ;
  }
}

ANDROID_CPP_ARGS +=
-Wno-conversion-null
-Wno-reorder # Warnings valid for C++ only
$(ADR_LIBCPP_DEFINES)
[ FQuoteFlag -I : $(ADR_LIBCPP_DIR_INCLUDE) ]
[ FQuoteFlag -I : $(ADR_LIBCPP_DIR_LIBS)/include ]
;

ANDROID_LINK_BASE_ARGS +=
[ FQuoteFlag -L : $(ADR_DIR_NDK_USR)/lib ]
-nostdlib
;

ANDROID_LINK_EXE_ARGS = $(ANDROID_LINK_BASE_ARGS)
-ffunction-sections
-fdata-sections
-Bdynamic
-Wl,-dynamic-linker,//system/bin/linker
-Wl,--gc-sections
-Wl,-z,nocopyreloc
-Wl,--no-undefined
[ FQuoteFlag -Wl,-rpath-link= : $(ADR_DIR_NDK_USR)/lib/crtend_android.o ]
[ FQuote $(ADR_DIR_NDK_USR)/lib/crtend_android.o ]
[ FQuote $(ADR_DIR_NDK_USR)/lib/crtbegin_dynamic.o ]
;

ANDROID_LINK_DLL_ARGS = $(ANDROID_LINK_BASE_ARGS)
-ffunction-sections
-fdata-sections
-Wl,--gc-sections
-Wl,-z,nocopyreloc
-Wl,--no-undefined
-Wl,-shared,-Bsymbolic
-Wl,--no-whole-archive
[ FQuoteFlag -Wl,-rpath-link= : $(ADR_DIR_NDK_USR)/lib ]
;

switch $(ADR_CPU_PROFILE)
{
    ## ARMv5TE no FPU
  case ARMv5 :
    ANDROID_SO_DIR = armeabi ;
    ANDROID_CC_ARGS +=
    -D__ARM_ARCH_5__
    -D__ARM_ARCH_5T__
    -D__ARM_ARCH_5E__
    -D__ARM_ARCH_5TE
    -D__CPU_ARMv5__
    -march=armv5te
    -mtune=xscale
    -msoft-float
    -mthumb
    ;
    if ! $(ADR_LLVM_VERSION) {
      ANDROID_CC_ARGS +=
      -mthumb-interwork
      ;
    }
    ## ARM7A VFPv3 (Cortex A8, NVidia Tegra 2, HTC Desire, ...)
  case ARMv7A :
    ANDROID_SO_DIR = armeabi-v7a ;
    ANDROID_CC_ARGS +=
    -D__ARM_ARCH_5__
    -D__ARM_ARCH_5T__
    -D__ARM_ARCH_5E__
    -D__ARM_ARCH_5TE
    -D__CPU_ARMv7A__
    -march=armv7-a
    -mfpu=vfpv3
    -mfloat-abi=softfp
    ;
    ANDROID_LINK_BASE_ARGS = -Wl,--fix-cortex-a8 ;
    if ! $(ADR_LLVM_VERSION) {
      ANDROID_CC_ARGS +=
      -mthumb-interwork
      ;
    }
    else {
      ANDROID_CC_ARGS +=
      -Wno-unknown-attributes
      ;
    }
    ## ARM64v8A
  case ARM64v8A :
    ANDROID_SO_DIR = arm64-v8a ;
    ANDROID_CC_ARGS +=
    -D__CPU_ARM64__
    -D__CPU_ARM64_V8A__
    ;
    ANDROID_LINK_BASE_ARGS = ;
    ## X86
  case X86 :
    ANDROID_SO_DIR = x86 ;
    ANDROID_CC_ARGS +=
    -D__CPU_X86__
    ;
    ANDROID_LINK_BASE_ARGS = ;
  case * :
    EXIT "Unknown Android CPU profile '"$(ADR_CPU_PROFILE)"'." ;
}

SYSTEM_LINKLIBS = [ FQuoteFlag -L : $(ADR_LIBCPP_DIR_LIBS) ] -llog -lc $(ADR_LIBCPP_LINKER_LIB) -ldl -lm -lgcc ;
SYSTEM_LINKLIBS += $(ADR_SYSTEM_LINKLIBS) ;

CCFLAGS   += $(ANDROID_CC_ARGS) ;
C++FLAGS  += $(ANDROID_CC_ARGS) $(ANDROID_CPP_ARGS) ;

ANDROID_WARN_ARGS = -Wall ;
SUFPCH = .h.gch ;

### "Debug" (da) build flags ###
ANDROID_DBG_ARGS = -g -O0 ;

### Optimized (ra) build flags ###
# Remark: fast-math is not compatible with SQLite, so can't be used ATM...
# Remark2: -O2 doesn't produce a measurable gain in perf atm, but it does produce a larger library...
if $(FLYMAKE) = 1 {
  ANDROID_OPT_ARGS = -O0 ;
}
else {
  ADR_GCC_OPT ?= -Os ;
  ECHO "I/Building with GCC Optimization flag:" $(ADR_GCC_OPT) ;
  if $(ADR_LLVM_VERSION) {
    ANDROID_OPT_ARGS = $(ADR_GCC_OPT) -fomit-frame-pointer ;
  }
  else {
    ANDROID_OPT_ARGS = $(ADR_GCC_OPT) -fomit-frame-pointer -finline-limit=120 ;
  }
}

rule tkCC++Build
{
  LINKFLAGS on $(PKGTARGETF) += $(LINKFLAGS) ;
  local t = $(<) ;
  local strOpt = "" ;
  # Set the optimization flags
  if ! $(DEBUG) {
    if $(NO_STRIP) != 1 {
      LINKFLAGS on $(PKGTARGETF) += -Wl,-s ;
    }
    PKGOPTIM += $(ANDROID_OPT_ARGS) ;
    strOpt += "(Optimized) " ;
  }
  # Set debug-only flags
  else {
    PKGOPTIM += $(ANDROID_DBG_ARGS) ;
    strOpt += "(DebugOnly) " ;
  }
  logVerbose "- CC++Build: " $(strOpt) ;
}

rule tkCC++Warnings
{
  # 	  PKGOPTIM += -Wall ;
  logVerbose "- C++ Warnings" ;
}

actions AGCC_C++PCH
{
  $(C++) -x c++-header -o $(<) $(C++FLAGS) $(OPTIM) $(CCDEFS) $(CCHDRS) $(>)
}

rule AGCC_C++PCH
{
  DEPENDS $(<) : $(>) ;
  C++FLAGS on $(<) += $(C++FLAGS) $(SUBDIRC++FLAGS) ;
  if $(PKGTYPE) = dll {
    C++FLAGS on $(<) += $(PICFLAGS) ;
  }
  CCHDRS on $(<) = [ on $(<) FIncludes $(HDRS) ] ;
  CCDEFS on $(<) = [ on $(<) FDefines $(DEFINES) ] ;
}

rule AGCC_BuildPCH
{
  Clean clean : $(<) ;

  MakeLocate $(<) : $(LOCATE_TARGET) ;
  SEARCH on $(>) = $(SEARCH_SOURCE) ;

  HDRS on $(<) = $(SEARCH_SOURCE) $(SUBDIRHDRS) $(HDRS) ;

  HDRRULE on $(>) = HdrRule ;
  HDRSCAN on $(>) = $(HDRPATTERN) ;
  HDRSEARCH on $(>) = $(SEARCH_SOURCE:E) $(SUBDIRHDRS) $(HDRS) $(STDHDRS) ;

  HDRGRIST on $(>) = $(HDRGRIST) ;

  DEFINES on $(<) += $(DEFINES) ;

  AGCC_C++PCH $(<) : $(>) ;
}

rule tkC++Pch
{
  local _src = [ FGristFiles $(3) ] ;
  local _extrasrc = [ FGristFiles $(4) ] ;

  local _pch = [ FGristFiles $(>:S=$(SUFPCH)) ] ;
  local _pchTarget = [ FDirName $(LOCATE_TARGET) $(>:S=$(SUFPCH)) ] ;
  local _cpp = [ FGristFiles $(>) ] ;
  local _hdr = [ FGristFiles $(>:S=.h) ] ;
  local _obj = $(_cpp:S=$(SUFOBJ)) ;
  local _dir = $(_pchTarget:D) ;

  MakeLocate $(_pch) : $(_dir) ;
  AGCC_BuildPCH $(_pch) : $(_hdr) ;

  DEPENDS $(<) : $(_pch) ;
  NotFile $(<) ;
  NoUpdate $(<) ;

  Clean clean : $(_pch) ;
  DEPENDS pch : $(<) ;

  ObjectC++Flags $(_src) : -include $(_pchTarget:S=) ;
  DEPENDS $(_src:S=$(SUFOBJ)) : $(<) $(_pch) $(_hdr) ;
  DEPENDS $(_extrasrc:S=$(SUFOBJ)) : $(<) $(_pch) $(_hdr) ;

  logVerbose "- PCH:" $(_pchTarget) ;
  return $(_hdr:S=$(SUFPCH)) ;
}

rule tkCC++Lint {
}

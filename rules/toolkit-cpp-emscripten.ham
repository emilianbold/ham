STRICT_ALIASING_FLAGS = -fno-strict-aliasing ;

TEMPDIR_JSCC = [ FDirName $(TEMPDIR) jscc ] ;
MakeLocate tkdir : $(TEMPDIR_JSCC) ;

JSCC_WARN_ARGS =
-Wall
-Wno-switch
-Wno-unknown-pragmas
-Wno-trigraphs
-Wno-narrowing
-Wno-sign-compare
# -Wno-warn-absolute-paths
-Wno-unused-value
-Wno-unused-variable
-Werror=return-stack-address
;
if $(LOA_LINKER) = clang || $(LOA_LINKER) = em {
  JSCC_WARN_ARGS +=
  -Wno-reorder
  -Wno-return-type-c-linkage
  -Wno-char-subscripts
  -Dgnu_scanf=scanf
  -Dgnu_printf=printf
  ;
}
# Clang 3.7
JSCC_WARN_ARGS +=
  -Wno-inconsistent-missing-override
  -Wno-unused-local-typedef
;
if $(FLYMAKE) = 1 {
  JSCC_WARN_ARGS += -Wno-\#pragma-messages ;
}

CCFLAGS += $(JSCC_WARN_ARGS) ;
C++FLAGS += $(JSCC_WARN_ARGS) ;

SUFPCH = .h.gch ;

C++FLAGS +=
  --memory-init-file 0
  -std=$(C++VERSION)
;

EMSCRIPTEN_COMPILATION_SETTINGS =
  -s DISABLE_EXCEPTION_CATCHING=1 -s WARN_ON_UNDEFINED_SYMBOLS=1 -s ERROR_ON_UNDEFINED_SYMBOLS=1
;

EMSCRIPTEN_USE_ASM_JS ?= 1 ;

if $(EMSCRIPTEN_USE_ASM_JS) = 1 {
  EMSCRIPTEN_COMPILATION_SETTINGS +=
    -s ALLOW_MEMORY_GROWTH=0 -s ASM_JS=1
  ;
}
else {
  EMSCRIPTEN_COMPILATION_SETTINGS +=
    -s ALLOW_MEMORY_GROWTH=1 -s ASM_JS=0
  ;
}

### "Debug" (da) build flags ###
JSCC_DBG_ARGS = $(STRICT_ALIASING_FLAGS) ;
JSCC_DBG_ARGS += -g2 -O1 -s GL_ASSERTIONS=1 $(EMSCRIPTEN_COMPILATION_SETTINGS) ;

### Optimized (ra) build flags ###
JSCC_OPT_ARGS = $(STRICT_ALIASING_FLAGS) ;
JSCC_OPT_ARGS +=
  -O2 -s ASSERTIONS=0
  $(EMSCRIPTEN_COMPILATION_SETTINGS)
  # Experimental flags
  -s INLINING_LIMIT=150
  --llvm-opts \"['-Os']\"
  # --llvm-lto 3 # Increases code size...
;

### Link flags ###
LINKFLAGS += --memory-init-file 0 --shell-file [ FQuote $(HAM_HOME)/sources/jscc/shell.html ] ;
if $(DEBUG) = 1 {
  LINKFLAGS += $(JSCC_DBG_ARGS) ;
}
else {
  LINKFLAGS += $(JSCC_OPT_ARGS) ;
}
ECHO "# JSCC (Web) Link Flags :" $(LINKFLAGS) ;

rule tkCC++Build
{
  local t = $(<) ;
  local strOpt = "" ;
  # Set the debug infos generation
  # Set the optimization flags
  if $(DEBUG) = 1 {
    PKGOPTIM += $(JSCC_DBG_ARGS) ;
    strOpt += "(DebugOnly) " ;
  }
  # Set debug-only flags
  else {
    PKGOPTIM += $(JSCC_OPT_ARGS) ;
    strOpt += "(Optimized) " ;
  }
  logVerbose "- CC++Build: " $(strOpt) ;
}

rule tkC++Exceptions {
  ObjectC++Flags $(<) : -fexceptions ;
}
rule tkNoC++Exceptions {
  ObjectC++Flags $(<) : -fno-exceptions ;
  # Needed to disable exception usage in the standard C++ library
  ObjectDefines $(<) : _HAS_EXCEPTIONS=0 ;
}

rule tkC++RTTI {
  ObjectC++Flags $(<) : -frtti ;
}
rule tkNoC++RTTI {
  ObjectC++Flags $(<) : -fno-rtti ;
}

rule tkCC++Lint {
}

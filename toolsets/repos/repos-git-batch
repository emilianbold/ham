#!/bin/bash
. ham-bash-lib.sh

usage() {
    echo "usage: repos-git-batch (-x) [ commands ]"
    echo ""
    echo "  Wrapper for git-batch that will run git-batch concurrently on all"
    echo "  git repos in the current directory."
    echo ""
    echo "  -x specify that the commands should be run concurrently"
    echo ""
    echo "  The arguments are passed verbatim to git-batch."
    echo ""
    git-batch -h

    if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
        # sourced...
        return 1
    else
        # regular call
        exit 1
    fi
}

# Check that there is at least one argument...
if [ $# = 0 -o "$1" == "-h" -o "$2" == "-h" ]; then
    if [ $# = 0 ]; then
        echo "E/No argument specified"
        echo ""
    fi
    usage
fi

apply_shell_expansion() {
    declare file="$1"
    declare data=$(< "$file")
    declare delimiter="__apply_shell_expansion_delimiter__"
    declare command="cat <<$delimiter"$'\n'"$data"$'\n'"$delimiter"
    eval "$command"
}

# Fetch the list of repos
if [[ "$1" == "." ]]; then
    REPOS_CWD=`repos-list-cwd`
else
    if [ ! -e "$1" ]; then
        echo "E/Can't find repos list '$1'."
        exit 1
    fi
    REPOS_CWD=$(apply_shell_expansion "$1")
fi
shift

# echo "REPOS_CWD:" $REPOS_CWD

# Check that they are all git directories
OIFS="$IFS"; IFS=$'\n' # Set IFS so that the for loop handle file with space in the name
for ARG in $REPOS_CWD; do
    if [ ! -d "$ARG/.git" ]; then
        echo "E/Not a git directory: '$ARG'"
        ERR_NOTGITDIR=1
    fi
done
IFS="$OIFS"
if [ ! -d "$ARG" ]; then
    exit 1
fi

# Check if we're running in concurrent mode
if [ "$1" == "-x" ]; then
    CONCURRENT=1
    shift
fi
if [ -z "$CONCURRENT" ]; then
    echo "I/Running sequentially"
else
    echo "I/Running concurrently"
fi

# Run the commands
OIFS="$IFS"; IFS=$'\n' # Set IFS so that the for loop handle file with space in the name
for ARG in $REPOS_CWD; do
    echo "== Repo '$ARG'"
    cd "$ARG"
    if [ ! -z "$1" ]; then
        if [ -z "$CONCURRENT" ]; then
            git-batch $*
            echo ""
        else
            git-batch $* &
        fi
    fi
done
IFS="$OIFS"

wait
echo "== Done."

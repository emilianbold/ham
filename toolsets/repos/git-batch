#!/bin/bash
. "$HAM_HOME/bin/ham-bash-setenv.sh"

GIT_BATCH_DEFAULT_REMOTE=origin

# the help
usage() {
    echo "usage: git-batch [ commands ]"
    echo ""
    echo "  Runs the specified git commands in the specified order."
    echo "  Stops at the first failure."
    echo ""
    echo "commands:"
    echo "  -h    This help message"
    echo "  -f    Fetch all branches from all remotes"
    echo "  -F    Prune and Fetch all branches from all remotes"
    echo "  -l    Print the last 4 commit messages"
    echo "  -m    Fetch & merge (pull) from '$GIT_BATCH_DEFAULT_REMOTE' to 'current branch'"
    echo "  -u    Push all (upload) to '$GIT_BATCH_DEFAULT_REMOTE'"
    echo "  -t    Push all tags (upload) to '$GIT_BATCH_DEFAULT_REMOTE'"
    echo "  -s    Porcelain status of the repo"
    echo "  -S    Full status of the repo"
    echo "  -y    Fetch all from '$GIT_BATCH_DEFAULT_REMOTE', merge '$GIT_BATCH_DEFAULT_REMOTE' into 'current branch',"
    echo "        then push all to '$GIT_BATCH_DEFAULT_REMOTE'. Alias for '-f -m -u -t'."
    echo ""
    echo "example:"
    echo "  # fetch all from '$GIT_BATCH_DEFAULT_REMOTE', merge '$GIT_BATCH_DEFAULT_REMOTE' into 'current branch',"
    echo "  # then push all to '$GIT_BATCH_DEFAULT_REMOTE'"
    echo "  git-batch -f -m -u"
    echo "  # fetch all from '$GIT_BATCH_DEFAULT_REMOTE', merge '$GIT_BATCH_DEFAULT_REMOTE' into 'current branch',"
    echo "  # then push all to '$GIT_BATCH_DEFAULT_REMOTE'"
    echo "  git-batch -y"
    echo ""

    if [[ "${BASH_SOURCE[0]}" != "${0}" ]]; then
        # sourced...
        return 1
    else
        # regular call
        exit 1
    fi
}

# Check that there is at least one argument...
if [ $# = 0 ]; then
    echo "E/No argument specified"
    echo ""
    usage
fi

if [ -z "$GITK_CMD" ]; then
    GITK_CMD=gitk
fi

# process the arguments
while getopts "dD:eE:fhlL:mM:pP:uU:tT:sSyk" OPT
do
    CMD=
    case "$OPT" in
        h)
            usage
            ;;
        \?)
            usage
            ;;
        s)
            CMD="git status --porcelain"
            ;;
        S)
            CMD="git status"
            ;;
        f)
            CMD="git fetch --all"
            ;;
        F)
            CMD="git fetch --prune --all"
            ;;
        l)
            CMD="git log -4 --pretty=oneline --abbrev-commit"
            ;;
        u)
            CMD="git push -u --all $GIT_BATCH_DEFAULT_REMOTE"
            ;;
        t)
            CMD="git push -u --tags $GIT_BATCH_DEFAULT_REMOTE"
            ;;
        m)
            export GIT_CURRENT_BRANCH=`git rev-parse --abbrev-ref HEAD`
            CMD="git pull --ff-only origin ${GIT_CURRENT_BRANCH}"
            ;;
        y)
            CMD="git-batch -f -m -u -t"
            ;;
    esac

    if [ -z "$CMD" ]; then
        echo "I/Skipped `pwd`"
    else
        echo "I/$CMD (in `pwd`)"
        eval $CMD
        errcheck $? git_batch "git-batch error: $CMD (in `pwd`)"
    fi

done
